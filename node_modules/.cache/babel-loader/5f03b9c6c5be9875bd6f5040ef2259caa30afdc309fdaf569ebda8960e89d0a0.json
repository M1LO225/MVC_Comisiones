{"ast":null,"code":"// 1. Importa los \"Casos de Uso\" (la l칩gica)\nimport { CalculateCommissionsUseCase } from '../domain/useCases/CalculateCommissionsUseCase';\n\n// 2. Importa las implementaciones concretas (los repositorios)\nimport { VendorRepository } from '../infrastructure/repositories/VendorRepository';\nimport { SaleRepository } from '../infrastructure/repositories/SaleRepository';\nimport { RuleRepository } from '../infrastructure/repositories/RuleRepository';\nexport class CommissionService {\n  constructor() {\n    // Inicializa las dependencias\n    this.vendorRepo = new VendorRepository();\n    this.saleRepo = new SaleRepository();\n    this.ruleRepo = new RuleRepository();\n    this.calculateUseCase = new CalculateCommissionsUseCase();\n  }\n\n  /**\r\n   * Orquesta el proceso completo de c치lculo de comisiones.\r\n   * @param {string} startDate \r\n   * @param {string} endDate \r\n   * @returns {Promise<Array>} El reporte de comisiones\r\n   */\n  async getCommissionReport(startDate, endDate) {\n    try {\n      // 3. Obtiene todos los datos en paralelo\n      const [vendors, sales, rules] = await Promise.all([this.vendorRepo.getAll(), this.saleRepo.getByDateRange(startDate, endDate), this.ruleRepo.getAll()]);\n\n      // 4. Llama al caso de uso (dominio) con los datos\n      const commissionReport = this.calculateUseCase.execute({\n        sales,\n        vendors,\n        rules\n      });\n      return commissionReport;\n    } catch (error) {\n      // 5. Maneja cualquier error de los repositorios\n      console.error('Error generating commission report:', error);\n      // Relanza el error para que la UI pueda manejarlo\n      throw new Error('Error al generar el reporte: ' + error.message);\n    }\n  }\n}","map":{"version":3,"names":["CalculateCommissionsUseCase","VendorRepository","SaleRepository","RuleRepository","CommissionService","constructor","vendorRepo","saleRepo","ruleRepo","calculateUseCase","getCommissionReport","startDate","endDate","vendors","sales","rules","Promise","all","getAll","getByDateRange","commissionReport","execute","error","console","Error","message"],"sources":["C:/Users/Usuario/Desktop/Calculo de comisiones MVC/src/application/CommissionService.js"],"sourcesContent":["// 1. Importa los \"Casos de Uso\" (la l칩gica)\r\nimport { CalculateCommissionsUseCase } from '../domain/useCases/CalculateCommissionsUseCase';\r\n\r\n// 2. Importa las implementaciones concretas (los repositorios)\r\nimport { VendorRepository } from '../infrastructure/repositories/VendorRepository';\r\nimport { SaleRepository } from '../infrastructure/repositories/SaleRepository';\r\nimport { RuleRepository } from '../infrastructure/repositories/RuleRepository';\r\n\r\nexport class CommissionService {\r\n  constructor() {\r\n    // Inicializa las dependencias\r\n    this.vendorRepo = new VendorRepository();\r\n    this.saleRepo = new SaleRepository();\r\n    this.ruleRepo = new RuleRepository();\r\n    this.calculateUseCase = new CalculateCommissionsUseCase();\r\n  }\r\n\r\n  /**\r\n   * Orquesta el proceso completo de c치lculo de comisiones.\r\n   * @param {string} startDate \r\n   * @param {string} endDate \r\n   * @returns {Promise<Array>} El reporte de comisiones\r\n   */\r\n  async getCommissionReport(startDate, endDate) {\r\n    try {\r\n      // 3. Obtiene todos los datos en paralelo\r\n      const [vendors, sales, rules] = await Promise.all([\r\n        this.vendorRepo.getAll(),\r\n        this.saleRepo.getByDateRange(startDate, endDate),\r\n        this.ruleRepo.getAll()\r\n      ]);\r\n\r\n      // 4. Llama al caso de uso (dominio) con los datos\r\n      const commissionReport = this.calculateUseCase.execute({ sales, vendors, rules });\r\n      \r\n      return commissionReport;\r\n\r\n    } catch (error) {\r\n      // 5. Maneja cualquier error de los repositorios\r\n      console.error('Error generating commission report:', error);\r\n      // Relanza el error para que la UI pueda manejarlo\r\n      throw new Error('Error al generar el reporte: ' + error.message);\r\n    }\r\n  }\r\n}"],"mappings":"AAAA;AACA,SAASA,2BAA2B,QAAQ,gDAAgD;;AAE5F;AACA,SAASC,gBAAgB,QAAQ,iDAAiD;AAClF,SAASC,cAAc,QAAQ,+CAA+C;AAC9E,SAASC,cAAc,QAAQ,+CAA+C;AAE9E,OAAO,MAAMC,iBAAiB,CAAC;EAC7BC,WAAWA,CAAA,EAAG;IACZ;IACA,IAAI,CAACC,UAAU,GAAG,IAAIL,gBAAgB,CAAC,CAAC;IACxC,IAAI,CAACM,QAAQ,GAAG,IAAIL,cAAc,CAAC,CAAC;IACpC,IAAI,CAACM,QAAQ,GAAG,IAAIL,cAAc,CAAC,CAAC;IACpC,IAAI,CAACM,gBAAgB,GAAG,IAAIT,2BAA2B,CAAC,CAAC;EAC3D;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMU,mBAAmBA,CAACC,SAAS,EAAEC,OAAO,EAAE;IAC5C,IAAI;MACF;MACA,MAAM,CAACC,OAAO,EAAEC,KAAK,EAAEC,KAAK,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAChD,IAAI,CAACX,UAAU,CAACY,MAAM,CAAC,CAAC,EACxB,IAAI,CAACX,QAAQ,CAACY,cAAc,CAACR,SAAS,EAAEC,OAAO,CAAC,EAChD,IAAI,CAACJ,QAAQ,CAACU,MAAM,CAAC,CAAC,CACvB,CAAC;;MAEF;MACA,MAAME,gBAAgB,GAAG,IAAI,CAACX,gBAAgB,CAACY,OAAO,CAAC;QAAEP,KAAK;QAAED,OAAO;QAAEE;MAAM,CAAC,CAAC;MAEjF,OAAOK,gBAAgB;IAEzB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D;MACA,MAAM,IAAIE,KAAK,CAAC,+BAA+B,GAAGF,KAAK,CAACG,OAAO,CAAC;IAClE;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}