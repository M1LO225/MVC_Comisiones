{"ast":null,"code":"// Ya no importamos 'supabase'\n\n// 1. Definimos las reglas quemadas\nconst hardcodedRules = [{\n  id: 1,\n  amount: 5000,\n  rule: 0.10\n},\n// 10% para ventas >= 5000\n{\n  id: 2,\n  amount: 1000,\n  rule: 0.05\n},\n// 5% para ventas >= 1000\n{\n  id: 3,\n  amount: 100,\n  rule: 0.02\n} // 2% para ventas >= 100\n];\nexport class RuleRepository {\n  /**\r\n   * Obtiene todas las reglas de comisión (datos quemados).\r\n   * @returns {Promise<Array>} Lista de reglas\r\n   */\n  async getAll() {\n    // 2. Simulamos la respuesta asíncrona\n    return Promise.resolve(hardcodedRules);\n  }\n}","map":{"version":3,"names":["hardcodedRules","id","amount","rule","RuleRepository","getAll","Promise","resolve"],"sources":["C:/Users/Usuario/Desktop/Calculo de comisiones MVC/src/infrastructure/repositories/RuleRepository.js"],"sourcesContent":["// Ya no importamos 'supabase'\r\n\r\n// 1. Definimos las reglas quemadas\r\nconst hardcodedRules = [\r\n  { id: 1, amount: 5000, rule: 0.10 }, // 10% para ventas >= 5000\r\n  { id: 2, amount: 1000, rule: 0.05 }, // 5% para ventas >= 1000\r\n  { id: 3, amount: 100, rule: 0.02 },  // 2% para ventas >= 100\r\n];\r\n\r\nexport class RuleRepository {\r\n  /**\r\n   * Obtiene todas las reglas de comisión (datos quemados).\r\n   * @returns {Promise<Array>} Lista de reglas\r\n   */\r\n  async getAll() {\r\n    // 2. Simulamos la respuesta asíncrona\r\n    return Promise.resolve(hardcodedRules);\r\n  }\r\n}"],"mappings":"AAAA;;AAEA;AACA,MAAMA,cAAc,GAAG,CACrB;EAAEC,EAAE,EAAE,CAAC;EAAEC,MAAM,EAAE,IAAI;EAAEC,IAAI,EAAE;AAAK,CAAC;AAAE;AACrC;EAAEF,EAAE,EAAE,CAAC;EAAEC,MAAM,EAAE,IAAI;EAAEC,IAAI,EAAE;AAAK,CAAC;AAAE;AACrC;EAAEF,EAAE,EAAE,CAAC;EAAEC,MAAM,EAAE,GAAG;EAAEC,IAAI,EAAE;AAAK,CAAC,CAAG;AAAA,CACtC;AAED,OAAO,MAAMC,cAAc,CAAC;EAC1B;AACF;AACA;AACA;EACE,MAAMC,MAAMA,CAAA,EAAG;IACb;IACA,OAAOC,OAAO,CAACC,OAAO,CAACP,cAAc,CAAC;EACxC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}